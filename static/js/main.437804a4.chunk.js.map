{"version":3,"sources":["Components/Header.jsx","Components/Login.jsx","Components/Footer.jsx","Components/ExpenseList.jsx","Services/expenseService.js","Components/Filter.jsx","Components/ExpenseForm.jsx","Components/QuickSearch.jsx","Components/DeleteRecords.jsx","Components/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","className","Footer","ExpenseList","props","handleSelected","id","numSelectedRecords","state","i","data","length","tmpData","isSelected","setState","onToggleSelect","handleSort","type","sort","a","b","ascending","amount","itemA","description","toUpperCase","itemB","comparison","commentA","comments","commentB","categoryA","categoryName","categoryB","dateA","Date","dateTime","dateB","sortingColumn","storageKey","listJsx","this","map","item","dt","key","onClick","getFullYear","getMonth","getDate","icon","faCheckCircle","faCaretUp","baseUrl","expenseService","getAllExpense","fetch","getCategories","filterExpense","filterObj","method","headers","body","JSON","stringify","deleteExpense","idList","addNew","newRecord","Filter","handleApplyFilter","then","resp","json","filterResult","onApplyFilter","handleInputChange","e","target","startDate","value","endDate","minAmount","maxAmount","catigoryIDs","htmlFor","onChange","ExpenseForm","onSubmitForm","r","Amount","Description","isError","CategoryName","document","getElementById","onAddNewRecord","reset","DateTime","Comments","Id","category","categories","console","log","categoryNames","ele","placeholder","QuickSearch","onQuickSearch","userInput","quickSearchResult","filter","indexOf","toString","faSearch","Login","onDelete","MainPage","handleDelete","expenseList","modifiedData","addFlagToList","handleQuickSearch","dataList","handleFilterResult","handleAddNewRecord","addedRecord","list","push","handleToggleSelect","DeleteRecords","App","path","process","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.437804a4.chunk.js","sourcesContent":["import React from 'react';\r\n//import './App.css';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n      return <div className='header'>\r\n          <h2>Daily Expense</h2>\r\n      </div>\r\n      ;\r\n    }\r\n  }\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport '../Sass/components/_login.scss';\r\n\r\nclass Login extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      error: \"\"\r\n    };\r\n\r\n    this.handlePassChange = this.handlePassChange.bind(this);\r\n    this.handleUserChange = this.handleUserChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.dismissError = this.dismissError.bind(this);\r\n  }\r\n\r\n  dismissError() {\r\n    this.setState({ error: \"\" });\r\n  }\r\n\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n\r\n    if (!this.state.username) {\r\n      return this.setState({ error: \"Username is required\" });\r\n    }\r\n\r\n    if (!this.state.password) {\r\n      return this.setState({ error: \"Password is required\" });\r\n    }\r\n\r\n    return this.setState({ error: \"\" });\r\n  }\r\n\r\n  handleUserChange(evt) {\r\n    this.setState({\r\n      username: evt.target.value\r\n    });\r\n  }\r\n\r\n  handlePassChange(evt) {\r\n    this.setState({\r\n      password: evt.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"login\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          {this.state.error && (\r\n            <h3 data-test=\"error\" onClick={this.dismissError}>\r\n              <button onClick={this.dismissError}>✖</button>\r\n              {this.state.error}\r\n            </h3>\r\n          )}\r\n          <label>User Name</label>\r\n          <input\r\n            type=\"text\"\r\n            data-test=\"username\"\r\n            value={this.state.username}\r\n            onChange={this.handleUserChange}\r\n          />\r\n\r\n          <label>Password</label>\r\n          <input\r\n            type=\"password\"\r\n            data-test=\"password\"\r\n            value={this.state.password}\r\n            onChange={this.handlePassChange}\r\n          />\r\n\r\n          <input type=\"submit\" value=\"Log In\" data-test=\"submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n//import './App.css';\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <h2>Footer</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n//import '../Sass/components/_ExpenseList.scss';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle, faCaretUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass ExpenseList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ascending: true,\r\n      data: [],\r\n      storageKey: \"expenseList\",\r\n      numSelectedRecords: 0,\r\n      sortingColumn: \"\"\r\n    };\r\n  }\r\n\r\n  // If 'data' from MainPage changes, this method is called, ExpenseList component gets updated.\r\n  static getDerivedStateFromProps(props, state) {\r\n    // debugger;\r\n    return { data: props.data };\r\n  }\r\n\r\n  // Toggle select rows\r\n  handleSelected = id => {\r\n    let numSelectedRecords = this.state.numSelectedRecords;\r\n\r\n    for (let i = 0; i < this.state.data.length; i++) {\r\n      if (id === this.state.data[i].id) {\r\n        let tmpData = this.state.data;\r\n\r\n        tmpData[i].isSelected = !tmpData[i].isSelected;\r\n        tmpData[i].isSelected ? numSelectedRecords++ : numSelectedRecords--;\r\n\r\n        this.setState({\r\n          numSelectedRecords: numSelectedRecords,\r\n          data: tmpData\r\n        });\r\n\r\n        this.props.onToggleSelect(numSelectedRecords);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Sort the data each column\r\n  handleSort = type => {\r\n    debugger;\r\n    const compareItem = (a, b) => {\r\n      const itemA = a.description.toUpperCase();\r\n      const itemB = b.description.toUpperCase();\r\n      // ** cannot compare 2 strings. this compare fn only return 0, 1, -1.\r\n      // return itemA>itemB?1:-1;\r\n      let comparison = 0;\r\n      if (itemA > itemB) {\r\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\r\n      } else if (itemA < itemB) {\r\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\r\n      }\r\n      return comparison;\r\n    };\r\n\r\n    const compareAmount = (a, b) => {\r\n      return this.state.ascending ? a.amount - b.amount : b.amount - a.amount;\r\n    };\r\n\r\n    const compareComment = (a, b) => {\r\n      const commentA = a.comments.toUpperCase();\r\n      const commentB = b.comments.toUpperCase();\r\n      let comparison = 0;\r\n      if (commentA > commentB) {\r\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\r\n      } else if (commentA < commentB) {\r\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\r\n      }\r\n      return comparison;\r\n    };\r\n\r\n    const compareCategory = (a, b) => {\r\n      const categoryA = a.categoryName.toUpperCase();\r\n      const categoryB = b.categoryName.toUpperCase();\r\n      let comparison = 0;\r\n      if (categoryA > categoryB) {\r\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\r\n      } else if (categoryA < categoryB) {\r\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\r\n      }\r\n      return comparison;\r\n    };\r\n\r\n    const compareDate = (a, b) => {\r\n      const dateA = new Date(a.dateTime);\r\n      const dateB = new Date(b.dateTime);\r\n      let comparison = 0;\r\n      if (dateA > dateB) {\r\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\r\n      } else if (dateA < dateB) {\r\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\r\n      }\r\n      return comparison;\r\n    };\r\n\r\n    switch (type) {\r\n      case \"Amount\":\r\n        this.state.data.sort(compareAmount);\r\n        break;\r\n      case \"Item\":\r\n        this.state.data.sort(compareItem);\r\n        break;\r\n      case \"Comment\":\r\n        this.state.data.sort(compareComment);\r\n        break;\r\n      case \"Category\":\r\n        this.state.data.sort(compareCategory);\r\n        break;\r\n      case \"Date\":\r\n        this.state.data.sort(compareDate);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    this.setState({\r\n      sortingColumn: type,\r\n      ascending: !this.state.ascending\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let listJsx = this.state.data.map(item => {\r\n      let dt = new Date(item.dateTime);\r\n\r\n      return (\r\n        <tr key={item.id} onClick={() => this.handleSelected(item.id)}>\r\n          <td>{`${dt.getFullYear()}-${\r\n            dt.getMonth() > 9 ? \"\" : \"0\"\r\n          }${dt.getMonth() + 1}-${\r\n            dt.getDate() > 10 ? \"\" : \"0\"\r\n          }${dt.getDate()}`}</td>\r\n          <td>{item.description}</td>\r\n          <td>{item.amount}</td>\r\n          <td>{item.categoryName}</td>\r\n          <td>{item.comments}</td>\r\n          {item.isSelected ? (\r\n            <td>\r\n              <FontAwesomeIcon icon={faCheckCircle} />\r\n            </td>\r\n          ) : (\r\n            <td></td>\r\n          )}\r\n        </tr>\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"expense-list\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th onClick={() => this.handleSort(\"Date\")}>\r\n                Date{\" \"}\r\n                {this.state.sortingColumn === \"Date\" &&\r\n                  (this.state.ascending ? (\r\n                    <FontAwesomeIcon icon={faCaretUp} />\r\n                  ) : (\r\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\r\n                  ))}\r\n              </th>\r\n              <th onClick={() => this.handleSort(\"Item\")}>\r\n                Item{\" \"}\r\n                {this.state.sortingColumn === \"Item\" &&\r\n                  (this.state.ascending ? (\r\n                    <FontAwesomeIcon icon={faCaretUp} />\r\n                  ) : (\r\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\r\n                  ))}\r\n              </th>\r\n              <th onClick={() => this.handleSort(\"Amount\")}>\r\n                Amount{\" \"}\r\n                {this.state.sortingColumn === \"Amount\" &&\r\n                  (this.state.ascending ? (\r\n                    <FontAwesomeIcon icon={faCaretUp} />\r\n                  ) : (\r\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\r\n                  ))}\r\n              </th>\r\n              <th onClick={() => this.handleSort(\"Category\")}>\r\n                Category{\" \"}\r\n                {this.state.sortingColumn === \"Category\" &&\r\n                  (this.state.ascending ? (\r\n                    <FontAwesomeIcon icon={faCaretUp} />\r\n                  ) : (\r\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\r\n                  ))}\r\n              </th>\r\n              <th onClick={() => this.handleSort(\"Comment\")}>\r\n                Comment{\" \"}\r\n                {this.state.sortingColumn === \"Comment\" &&\r\n                  (this.state.ascending ? (\r\n                    <FontAwesomeIcon icon={faCaretUp} />\r\n                  ) : (\r\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\r\n                  ))}\r\n              </th>\r\n              <th className=\"Table-th\"></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{listJsx}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExpenseList;\r\n","const baseUrl = 'https://lvaw1qhhfi.execute-api.us-east-1.amazonaws.com/Prod/api/';\r\n\r\nlet expenseService = {\r\n    getAllExpense: ()=> fetch(baseUrl + \"Expense\"),\r\n\r\n    getCategories: ()=> fetch(baseUrl + \"Expense/Categories\"),\r\n\r\n    filterExpense: (filterObj)=> fetch(baseUrl + \"Expense/filter\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(filterObj)\r\n      }),\r\n\r\n    deleteExpense: (idList)=> fetch(baseUrl + \"Expense/delete\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(idList)\r\n      }),\r\n\r\n    addNew: (newRecord) => fetch(baseUrl + \"Expense\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(newRecord)\r\n      })\r\n}\r\n \r\nexport default expenseService;\r\n","import React from \"react\";\r\nimport expenseService from \"../Services/expenseService\";\r\n//import './App.css';\r\n\r\nclass Filter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filterObj: {\r\n        startDate: \"\",\r\n        endDate: \"\",\r\n        catigoryIDs: [],\r\n        minAmount: 0,\r\n        maxAmount: 99999\r\n      }\r\n    };\r\n  }\r\n\r\n  handleApplyFilter = () => {\r\n    // Call API to get filtered result(data) and update to table\r\n    // fetch(\"http://localhost:50204/api/Expense/filter\", {\r\n    //   method: \"POST\",\r\n    //   headers: { \"Content-Type\": \"application/json\" },\r\n    //   body: JSON.stringify(this.state.filterObj)\r\n    // })\r\n    expenseService\r\n      .filterExpense(this.state.filterObj)\r\n      .then(resp => resp.json())\r\n      .then(filterResult => {\r\n        this.props.onApplyFilter(filterResult);\r\n      });\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    let filterObj = this.state.filterObj;\r\n    switch (e.target.id) {\r\n      case \"start-date\":\r\n        filterObj.startDate = e.target.value;\r\n        break;\r\n      case \"end-date\":\r\n        filterObj.endDate = e.target.value;\r\n        break;\r\n      case \"min-amount\":\r\n        filterObj.minAmount = e.target.value;\r\n        break;\r\n      case \"max-amount\":\r\n        filterObj.maxAmount = e.target.value;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"grid-item filter\">\r\n        {/* filter by date */}\r\n        <div className=\"filter-date-range\">\r\n          <div>\r\n            <label htmlFor=\"start-date\">From</label>\r\n            <input\r\n              id=\"start-date\"\r\n              className=\"form-control\"\r\n              type=\"date\"\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"end-date\">To</label>\r\n            <input\r\n              id=\"end-date\"\r\n              className=\"form-control\"\r\n              type=\"date\"\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* filter by category */}\r\n        <div className=\"filter-categories\"></div>\r\n\r\n        {/* filter by amount */}\r\n        <div className=\"filter-amount-range\">\r\n          <p>Amount</p>\r\n          <input\r\n            type=\"text\"\r\n            id=\"min-amount\"\r\n            onChange={this.handleInputChange}\r\n          />\r\n          <span>To</span>\r\n          <input\r\n            type=\"text\"\r\n            id=\"max-amount\"\r\n            onChange={this.handleInputChange}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <input\r\n            type=\"button\"\r\n            value=\"Apply Filter\"\r\n            className=\"btn-apply-filter\"\r\n            onClick={this.handleApplyFilter}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport \"../Sass/components/_expense-form.scss\";\r\nimport expenseService from \"../Services/expenseService\";\r\n\r\nclass ExpenseForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newRecord: {\r\n        Id: 0,\r\n        DateTime: \"\",\r\n        Description: \"\",\r\n        Amount: \"\",\r\n        CategoryName: \"\",\r\n        Comments: \"\"\r\n      },\r\n      category: [],\r\n      isError: false\r\n    };\r\n  }\r\n\r\n  onSubmitForm = () => {\r\n    const r = this.state.newRecord;\r\n    if (\r\n      r.Amount === \"\" ||\r\n      r.Description === \"\"\r\n      // r.DateTime === \"\" ||\r\n      // r.CategoryName === \"\"\r\n    ) {\r\n      this.setState({ isError: true });\r\n    } else {\r\n      r.CategoryName = document.getElementById(\"category\").value;\r\n      this.setState({ newRecord: r });\r\n\r\n      // update newRecord to MainPage\r\n      this.props.onAddNewRecord(this.state.newRecord);\r\n\r\n      // clear inputs once 'Submit' button is clicked\r\n      document.getElementById(\"expense-form\").reset();\r\n    }\r\n  };\r\n\r\n  // get value of new record using onChange fn\r\n  handleInputChange = e => {\r\n    const newRecord = this.state.newRecord;\r\n\r\n    if (e.target.id === \"date\") {\r\n      newRecord.DateTime = e.target.value;\r\n    } else if (e.target.id === \"category\") {\r\n      newRecord.CategoryName = e.target.value;\r\n    } else if (e.target.id === \"item-name\") {\r\n      newRecord.Description = e.target.value;\r\n    } else if (e.target.id === \"amount\") {\r\n      newRecord.Amount = e.target.value;\r\n    } else if (e.target.id === \"comments\") {\r\n      newRecord.Comments = e.target.value;\r\n    }\r\n\r\n    this.setState({ newRecord: newRecord });\r\n  };\r\n\r\n  // get categories obj list from sever, includs 'id' & 'categoryName'\r\n  componentDidMount() {\r\n    // fetch(\"http://localhost:50204/api/Expense/Categories\")\r\n    expenseService\r\n      .getCategories()\r\n      .then(resp => resp.json())\r\n      .then(categories => {\r\n        this.setState({\r\n          category: categories\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    // debugger;\r\n    console.log(\"render\");\r\n    // Form Category options\r\n    const categoryNames = this.state.category.map(ele => {\r\n      return <option>{ele.categoryName}</option>;\r\n    });\r\n\r\n    // Form\r\n    return (\r\n      <div className=\"expense-form\">\r\n        <form id=\"expense-form\">\r\n          <div className=\"form-group\">\r\n            <input\r\n              id=\"date\"\r\n              className=\"form-control\"\r\n              type=\"date\"\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <select\r\n              id=\"category\"\r\n              className=\"form-control\"\r\n              onChange={this.handleInputChange}\r\n            >\r\n              {categoryNames}\r\n              {/* hard code of categories*/}\r\n              {/* <option value=\"Grocery\">Grocery</option>\r\n              <option>Petrol</option>\r\n              <option>Education</option>\r\n              <option>Insurance</option>\r\n              <option>Others</option> */}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              id=\"item-name\"\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              placeholder=\"Item Name\"\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              id=\"amount\"\r\n              className=\"form-control\"\r\n              type=\"number\"\r\n              placeholder=\"Amount\"\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              id=\"comments\"\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              placeholder=\"Comments\"\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </div>\r\n          {/* Alert when submit without input */}\r\n          {/* {alertDiv} */}\r\n          <div>\r\n            <input\r\n              className=\"btn-add-expense\"\r\n              type=\"button\"\r\n              value=\"Submit\"\r\n              onClick={this.onSubmitForm}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExpenseForm;\r\n","import React from \"react\";\r\nimport \"../Sass/components/_quick-search.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass QuickSearch extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n    };\r\n  }\r\n\r\n  // If 'data' from MainPage changes, this method is called.\r\n  static getDerivedStateFromProps(props, state) {\r\n    return { data: props.data };\r\n  }\r\n\r\n  // Quick search\r\n  onQuickSearch = e => {\r\n    debugger;\r\n    var userInput = e.target.value.toUpperCase();\r\n    const filterFn = item =>\r\n      item.description.toUpperCase().indexOf(userInput) >= 0 ||\r\n      item.amount.toString().indexOf(userInput) >= 0 ||\r\n      item.categoryName.toUpperCase().indexOf(userInput) >= 0;\r\n\r\n    let quickSearchResult = this.state.data.filter(filterFn);\r\n\r\n    this.props.onQuickSearch(quickSearchResult);\r\n    console.log(\"search done\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"quick-search\">\r\n        <input type=\"text\" onChange={e => this.onQuickSearch(e)} />\r\n        <FontAwesomeIcon icon={faSearch} className=\"search-icon\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuickSearch;\r\n","import React from \"react\";\r\n//import \"../Sass/components/_delete-records.scss\";\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numSelectedRecords: 0\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    return { numSelectedRecords: props.numSelectedRecords };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"delete-records\">\r\n        <input\r\n          type=\"button\"\r\n          onClick={this.props.onDelete}\r\n          // ES6 string\r\n          value={`Delete ${this.state.numSelectedRecords} Records`}\r\n          // disabled={this.state.numSelectedRecords === 0}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport ExpenseList from \"./ExpenseList\";\r\nimport Filter from \"./Filter\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport QuickSearch from \"./QuickSearch\";\r\nimport DeleteRecords from \"./DeleteRecords\";\r\nimport expenseService from \"../Services/expenseService\";\r\nimport \"../Sass/main.scss\";\r\n\r\nclass MainPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      expenseList: [],\r\n      quickSearchResult: [],\r\n      numSelectedRecords: 0\r\n    };\r\n  }\r\n\r\n  // delete all records that marked as \"selected\"\r\n  handleDelete = () => {\r\n    // Find element ids\r\n    const idList = this.state.expenseList\r\n      .filter(item => item.isSelected)\r\n      .map(item => item.id);\r\n\r\n    // Post the new array which includs all selected elements' ids to sever\r\n    // Then reload data from sever\r\n    // fetch(\"http://localhost:50204/api/Expense/delete\", {\r\n    //   method: \"POST\",\r\n    //   headers: { \"Content-Type\": \"application/json\" },\r\n    //   body: JSON.stringify(idList)\r\n    // })\r\n    expenseService\r\n      .deleteExpense(idList)\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        // fetch(\"http://localhost:50204/api/Expense\")\r\n        expenseService\r\n          .getAllExpense()\r\n          .then(resp => resp.json())\r\n          .then(data => {\r\n            const modifiedData = this.addFlagToList(data);\r\n            this.setState({\r\n              expenseList: modifiedData,\r\n              quickSearchResult: modifiedData\r\n            });\r\n          });\r\n      });\r\n  };\r\n\r\n  handleQuickSearch = quickSearchResult => {\r\n    this.setState({ quickSearchResult: quickSearchResult });\r\n  };\r\n\r\n  // add isSelected flag to each element of data list\r\n  addFlagToList = dataList => {\r\n    return dataList.map(item => {\r\n      item.isSelected = false;\r\n      return item;\r\n    });\r\n  };\r\n\r\n  handleFilterResult = filterResult => {\r\n    // add flags to filter result\r\n    const modifiedData = this.addFlagToList(filterResult);\r\n\r\n    // using filterd result to update expense list\r\n    this.setState({\r\n      expenseList: modifiedData,\r\n      quickSearchResult: modifiedData\r\n    });\r\n  };\r\n\r\n  handleAddNewRecord = newRecord => {\r\n    // debugger;\r\n    // Call API to post new record to server and update to table\r\n    // fetch(\"http://localhost:50204/api/Expense\", {\r\n    //   method: \"POST\",\r\n    //   headers: { \"Content-Type\": \"application/json\" },\r\n    //   body: JSON.stringify(newRecord)\r\n    // })\r\n    expenseService\r\n      .addNew(newRecord)\r\n      .then(resp => resp.json())\r\n      .then(addedRecord => {\r\n        // add flag to this new record obj\r\n        addedRecord.isSelected = false;\r\n        const list = this.state.expenseList;\r\n        list.push(addedRecord);\r\n\r\n        this.setState({ expenseList: list, quickSearchResult: list });\r\n      });\r\n  };\r\n\r\n  handleToggleSelect = numSelectedRecords => {\r\n    this.setState({ numSelectedRecords: numSelectedRecords });\r\n  };\r\n\r\n  // load data from sever after render\r\n  componentDidMount() {\r\n    //fetch(\"http://localhost:50204/api/Expense\")\r\n    expenseService\r\n      .getAllExpense()\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        const modifiedData = this.addFlagToList(data);\r\n\r\n        this.setState({\r\n          expenseList: modifiedData,\r\n          quickSearchResult: modifiedData\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-page\">\r\n        <div>\r\n          <QuickSearch\r\n            data={this.state.expenseList}\r\n            onQuickSearch={this.handleQuickSearch}\r\n          />\r\n          <Filter onApplyFilter={this.handleFilterResult} />\r\n        </div>\r\n\r\n        <div>\r\n          <ExpenseForm onAddNewRecord={this.handleAddNewRecord} />\r\n          <DeleteRecords\r\n            onDelete={this.handleDelete}\r\n            numSelectedRecords={this.state.numSelectedRecords}\r\n          />\r\n          <ExpenseList\r\n            data={this.state.quickSearchResult}\r\n            onToggleSelect={this.handleToggleSelect}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport \"./Sass/main.scss\";\r\nimport Login from \"./Components/Login\";\r\nimport Header from \"./Components/Header\";\r\nimport Footer from \"./Components/Footer\";\r\nimport MainPage from \"./Components/MainPage\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Switch>\r\n          {/* <Route path={process.env.PUBLIC_URL + \"/\"} exact component={Login} /> */}\r\n          <Route\r\n            path={process.env.PUBLIC_URL + \"/\"}\r\n            component={MainPage}\r\n          />\r\n        </Switch>\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}