{"version":3,"sources":["Components/Login.jsx","Components/Header.jsx","Components/Footer.jsx","Components/ExpenseList.jsx","Services/expenseService.js","Components/Filter.jsx","Components/ExpenseForm.jsx","Components/QuickSearch.jsx","Components/DeleteRecords.jsx","Components/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","state","username","password","error","handlePassChange","bind","handleUserChange","handleSubmit","dismissError","this","setState","evt","preventDefault","target","value","className","onSubmit","data-test","onClick","type","onChange","React","Component","Header","Footer","ExpenseList","props","handleSelected","id","numSelectedRecords","i","data","length","tmpData","isSelected","onToggleSelect","handleSort","sort","a","b","ascending","amount","itemA","description","toUpperCase","itemB","comparison","commentA","comments","commentB","categoryA","categoryName","categoryB","dateA","Date","dateTime","dateB","sortingColumn","storageKey","listJsx","map","item","dt","key","getFullYear","getMonth","getDate","icon","faCheckCircle","faCaretUp","baseUrl","expenseService","getAllExpense","fetch","getCategories","filterExpense","filterObj","method","headers","body","JSON","stringify","deleteExpense","idList","addNew","newRecord","Filter","handleApplyFilter","then","resp","json","filterResult","onApplyFilter","handleInputChange","e","startDate","endDate","minAmount","maxAmount","catigoryIDs","htmlFor","ExpenseForm","onSubmitForm","r","Amount","Description","isError","CategoryName","document","getElementById","onAddNewRecord","reset","DateTime","Comments","Id","category","categories","console","log","categoryNames","ele","placeholder","QuickSearch","onQuickSearch","userInput","quickSearchResult","filter","indexOf","toString","faSearch","onDelete","MainPage","handleDelete","expenseList","modifiedData","addFlagToList","handleQuickSearch","dataList","handleFilterResult","handleAddNewRecord","addedRecord","list","push","handleToggleSelect","DeleteRecords","App","basename","process","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46881cc1.chunk.js","sourcesContent":["import React from \"react\";\nimport '../Sass/components/_login.scss';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      username: \"\",\n      password: \"\",\n      error: \"\"\n    };\n\n    this.handlePassChange = this.handlePassChange.bind(this);\n    this.handleUserChange = this.handleUserChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.dismissError = this.dismissError.bind(this);\n  }\n\n  dismissError() {\n    this.setState({ error: \"\" });\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n\n    if (!this.state.username) {\n      return this.setState({ error: \"Username is required\" });\n    }\n\n    if (!this.state.password) {\n      return this.setState({ error: \"Password is required\" });\n    }\n\n    return this.setState({ error: \"\" });\n  }\n\n  handleUserChange(evt) {\n    this.setState({\n      username: evt.target.value\n    });\n  }\n\n  handlePassChange(evt) {\n    this.setState({\n      password: evt.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"login\">\n        <form onSubmit={this.handleSubmit}>\n          {this.state.error && (\n            <h3 data-test=\"error\" onClick={this.dismissError}>\n              <button onClick={this.dismissError}>✖</button>\n              {this.state.error}\n            </h3>\n          )}\n          <label>User Name</label>\n          <input\n            type=\"text\"\n            data-test=\"username\"\n            value={this.state.username}\n            onChange={this.handleUserChange}\n          />\n\n          <label>Password</label>\n          <input\n            type=\"password\"\n            data-test=\"password\"\n            value={this.state.password}\n            onChange={this.handlePassChange}\n          />\n\n          <input type=\"submit\" value=\"Log In\" data-test=\"submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\n//import './App.css';\n\nclass Header extends React.Component {\n    render() {\n      return <div className='header'>\n          <h2>Daily Expense</h2>\n      </div>\n      ;\n    }\n  }\n\nexport default Header;\n","import React from \"react\";\n//import './App.css';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div className=\"footer\">\n        <h2>Footer</h2>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React from \"react\";\n//import '../Sass/components/_ExpenseList.scss';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faCaretUp } from \"@fortawesome/free-solid-svg-icons\";\n\nclass ExpenseList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ascending: true,\n      data: [],\n      storageKey: \"expenseList\",\n      numSelectedRecords: 0,\n      sortingColumn: \"\"\n    };\n  }\n\n  // If 'data' from MainPage changes, this method is called, ExpenseList component gets updated.\n  static getDerivedStateFromProps(props, state) {\n    // debugger;\n    return { data: props.data };\n  }\n\n  // Toggle select rows\n  handleSelected = id => {\n    let numSelectedRecords = this.state.numSelectedRecords;\n\n    for (let i = 0; i < this.state.data.length; i++) {\n      if (id === this.state.data[i].id) {\n        let tmpData = this.state.data;\n\n        tmpData[i].isSelected = !tmpData[i].isSelected;\n        tmpData[i].isSelected ? numSelectedRecords++ : numSelectedRecords--;\n\n        this.setState({\n          numSelectedRecords: numSelectedRecords,\n          data: tmpData\n        });\n\n        this.props.onToggleSelect(numSelectedRecords);\n        return;\n      }\n    }\n  }\n\n  // Sort the data each column\n  handleSort = type => {\n    debugger;\n    const compareItem = (a, b) => {\n      const itemA = a.description.toUpperCase();\n      const itemB = b.description.toUpperCase();\n      // ** cannot compare 2 strings. this compare fn only return 0, 1, -1.\n      // return itemA>itemB?1:-1;\n      let comparison = 0;\n      if (itemA > itemB) {\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\n      } else if (itemA < itemB) {\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\n      }\n      return comparison;\n    };\n\n    const compareAmount = (a, b) => {\n      return this.state.ascending ? a.amount - b.amount : b.amount - a.amount;\n    };\n\n    const compareComment = (a, b) => {\n      const commentA = a.comments.toUpperCase();\n      const commentB = b.comments.toUpperCase();\n      let comparison = 0;\n      if (commentA > commentB) {\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\n      } else if (commentA < commentB) {\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\n      }\n      return comparison;\n    };\n\n    const compareCategory = (a, b) => {\n      const categoryA = a.categoryName.toUpperCase();\n      const categoryB = b.categoryName.toUpperCase();\n      let comparison = 0;\n      if (categoryA > categoryB) {\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\n      } else if (categoryA < categoryB) {\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\n      }\n      return comparison;\n    };\n\n    const compareDate = (a, b) => {\n      const dateA = new Date(a.dateTime);\n      const dateB = new Date(b.dateTime);\n      let comparison = 0;\n      if (dateA > dateB) {\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\n      } else if (dateA < dateB) {\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\n      }\n      return comparison;\n    };\n\n    switch (type) {\n      case \"Amount\":\n        this.state.data.sort(compareAmount);\n        break;\n      case \"Item\":\n        this.state.data.sort(compareItem);\n        break;\n      case \"Comment\":\n        this.state.data.sort(compareComment);\n        break;\n      case \"Category\":\n        this.state.data.sort(compareCategory);\n        break;\n      case \"Date\":\n        this.state.data.sort(compareDate);\n        break;\n      default:\n        break;\n    }\n\n    this.setState({\n      sortingColumn: type,\n      ascending: !this.state.ascending\n    });\n  }\n\n  render() {\n    let listJsx = this.state.data.map(item => {\n      let dt = new Date(item.dateTime);\n\n      return (\n        <tr key={item.id} onClick={() => this.handleSelected(item.id)}>\n          <td>{`${dt.getFullYear()}-${\n            dt.getMonth() > 9 ? \"\" : \"0\"\n          }${dt.getMonth() + 1}-${\n            dt.getDate() > 10 ? \"\" : \"0\"\n          }${dt.getDate()}`}</td>\n          <td>{item.description}</td>\n          <td>{item.amount}</td>\n          <td>{item.categoryName}</td>\n          <td>{item.comments}</td>\n          {item.isSelected ? (\n            <td>\n              <FontAwesomeIcon icon={faCheckCircle} />\n            </td>\n          ) : (\n            <td></td>\n          )}\n        </tr>\n      );\n    });\n    return (\n      <div className=\"expense-list\">\n        <table>\n          <thead>\n            <tr>\n              <th onClick={() => this.handleSort(\"Date\")}>\n                Date{\" \"}\n                {this.state.sortingColumn === \"Date\" &&\n                  (this.state.ascending ? (\n                    <FontAwesomeIcon icon={faCaretUp} />\n                  ) : (\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\n                  ))}\n              </th>\n              <th onClick={() => this.handleSort(\"Item\")}>\n                Item{\" \"}\n                {this.state.sortingColumn === \"Item\" &&\n                  (this.state.ascending ? (\n                    <FontAwesomeIcon icon={faCaretUp} />\n                  ) : (\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\n                  ))}\n              </th>\n              <th onClick={() => this.handleSort(\"Amount\")}>\n                Amount{\" \"}\n                {this.state.sortingColumn === \"Amount\" &&\n                  (this.state.ascending ? (\n                    <FontAwesomeIcon icon={faCaretUp} />\n                  ) : (\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\n                  ))}\n              </th>\n              <th onClick={() => this.handleSort(\"Category\")}>\n                Category{\" \"}\n                {this.state.sortingColumn === \"Category\" &&\n                  (this.state.ascending ? (\n                    <FontAwesomeIcon icon={faCaretUp} />\n                  ) : (\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\n                  ))}\n              </th>\n              <th onClick={() => this.handleSort(\"Comment\")}>\n                Comment{\" \"}\n                {this.state.sortingColumn === \"Comment\" &&\n                  (this.state.ascending ? (\n                    <FontAwesomeIcon icon={faCaretUp} />\n                  ) : (\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\n                  ))}\n              </th>\n              <th className=\"Table-th\"></th>\n            </tr>\n          </thead>\n          <tbody>{listJsx}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default ExpenseList;\n","const baseUrl = 'https://lvaw1qhhfi.execute-api.us-east-1.amazonaws.com/Prod/api/';\r\n\r\nlet expenseService = {\r\n    getAllExpense: ()=> fetch(baseUrl + \"Expense\"),\r\n\r\n    getCategories: ()=> fetch(baseUrl + \"Expense/Categories\"),\r\n\r\n    filterExpense: (filterObj)=> fetch(baseUrl + \"Expense/filter\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(filterObj)\r\n      }),\r\n\r\n    deleteExpense: (idList)=> fetch(baseUrl + \"Expense/delete\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(idList)\r\n      }),\r\n\r\n    addNew: (newRecord) => fetch(baseUrl + \"Expense\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(newRecord)\r\n      })\r\n}\r\n \r\nexport default expenseService;\r\n","import React from \"react\";\nimport expenseService from \"../Services/expenseService\";\n//import './App.css';\n\nclass Filter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterObj: {\n        startDate: \"\",\n        endDate: \"\",\n        catigoryIDs: [],\n        minAmount: 0,\n        maxAmount: 99999\n      }\n    };\n  }\n\n  handleApplyFilter = () => {\n    // Call API to get filtered result(data) and update to table\n    // fetch(\"http://localhost:50204/api/Expense/filter\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(this.state.filterObj)\n    // })\n    expenseService\n      .filterExpense(this.state.filterObj)\n      .then(resp => resp.json())\n      .then(filterResult => {\n        this.props.onApplyFilter(filterResult);\n      });\n  };\n\n  handleInputChange = e => {\n    let filterObj = this.state.filterObj;\n    switch (e.target.id) {\n      case \"start-date\":\n        filterObj.startDate = e.target.value;\n        break;\n      case \"end-date\":\n        filterObj.endDate = e.target.value;\n        break;\n      case \"min-amount\":\n        filterObj.minAmount = e.target.value;\n        break;\n      case \"max-amount\":\n        filterObj.maxAmount = e.target.value;\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"grid-item filter\">\n        {/* filter by date */}\n        <div className=\"filter-date-range\">\n          <div>\n            <label htmlFor=\"start-date\">From</label>\n            <input\n              id=\"start-date\"\n              className=\"form-control\"\n              type=\"date\"\n              onChange={this.handleInputChange}\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"end-date\">To</label>\n            <input\n              id=\"end-date\"\n              className=\"form-control\"\n              type=\"date\"\n              onChange={this.handleInputChange}\n            />\n          </div>\n        </div>\n\n        {/* filter by category */}\n        <div className=\"filter-categories\"></div>\n\n        {/* filter by amount */}\n        <div className=\"filter-amount-range\">\n          <p>Amount</p>\n          <input\n            type=\"text\"\n            id=\"min-amount\"\n            onChange={this.handleInputChange}\n          />\n          <span>To</span>\n          <input\n            type=\"text\"\n            id=\"max-amount\"\n            onChange={this.handleInputChange}\n          />\n        </div>\n\n        <div>\n          <input\n            type=\"button\"\n            value=\"Apply Filter\"\n            className=\"btn-apply-filter\"\n            onClick={this.handleApplyFilter}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Filter;\n","import React from \"react\";\nimport \"../Sass/components/_expense-form.scss\";\nimport expenseService from \"../Services/expenseService\";\n\nclass ExpenseForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newRecord: {\n        Id: 0,\n        DateTime: \"\",\n        Description: \"\",\n        Amount: \"\",\n        CategoryName: \"\",\n        Comments: \"\"\n      },\n      category: [],\n      isError: false\n    };\n  }\n\n  onSubmitForm = () => {\n    const r = this.state.newRecord;\n    if (\n      r.Amount === \"\" ||\n      r.Description === \"\"\n      // r.DateTime === \"\" ||\n      // r.CategoryName === \"\"\n    ) {\n      this.setState({ isError: true });\n    } else {\n      r.CategoryName = document.getElementById(\"category\").value;\n      this.setState({ newRecord: r });\n\n      // update newRecord to MainPage\n      this.props.onAddNewRecord(this.state.newRecord);\n\n      // clear inputs once 'Submit' button is clicked\n      document.getElementById(\"expense-form\").reset();\n    }\n  };\n\n  // get value of new record using onChange fn\n  handleInputChange = e => {\n    const newRecord = this.state.newRecord;\n\n    if (e.target.id === \"date\") {\n      newRecord.DateTime = e.target.value;\n    } else if (e.target.id === \"category\") {\n      newRecord.CategoryName = e.target.value;\n    } else if (e.target.id === \"item-name\") {\n      newRecord.Description = e.target.value;\n    } else if (e.target.id === \"amount\") {\n      newRecord.Amount = e.target.value;\n    } else if (e.target.id === \"comments\") {\n      newRecord.Comments = e.target.value;\n    }\n\n    this.setState({ newRecord: newRecord });\n  };\n\n  // get categories obj list from sever, includs 'id' & 'categoryName'\n  componentDidMount() {\n    // fetch(\"http://localhost:50204/api/Expense/Categories\")\n    expenseService\n      .getCategories()\n      .then(resp => resp.json())\n      .then(categories => {\n        this.setState({\n          category: categories\n        });\n      });\n  }\n\n  render() {\n    // debugger;\n    console.log(\"render\");\n    // Form Category options\n    const categoryNames = this.state.category.map(ele => {\n      return <option>{ele.categoryName}</option>;\n    });\n\n    // Form\n    return (\n      <div className=\"expense-form\">\n        <form id=\"expense-form\">\n          <div className=\"form-group\">\n            <input\n              id=\"date\"\n              className=\"form-control\"\n              type=\"date\"\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <select\n              id=\"category\"\n              className=\"form-control\"\n              onChange={this.handleInputChange}\n            >\n              {categoryNames}\n              {/* hard code of categories*/}\n              {/* <option value=\"Grocery\">Grocery</option>\n              <option>Petrol</option>\n              <option>Education</option>\n              <option>Insurance</option>\n              <option>Others</option> */}\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <input\n              id=\"item-name\"\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"Item Name\"\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              id=\"amount\"\n              className=\"form-control\"\n              type=\"number\"\n              placeholder=\"Amount\"\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              id=\"comments\"\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"Comments\"\n              onChange={this.handleInputChange}\n            />\n          </div>\n          {/* Alert when submit without input */}\n          {/* {alertDiv} */}\n          <div>\n            <input\n              className=\"btn-add-expense\"\n              type=\"button\"\n              value=\"Submit\"\n              onClick={this.onSubmitForm}\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ExpenseForm;\n","import React from \"react\";\nimport \"../Sass/components/_quick-search.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nclass QuickSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n    };\n  }\n\n  // If 'data' from MainPage changes, this method is called.\n  static getDerivedStateFromProps(props, state) {\n    return { data: props.data };\n  }\n\n  // Quick search\n  onQuickSearch = e => {\n    debugger;\n    var userInput = e.target.value.toUpperCase();\n    const filterFn = item =>\n      item.description.toUpperCase().indexOf(userInput) >= 0 ||\n      item.amount.toString().indexOf(userInput) >= 0 ||\n      item.categoryName.toUpperCase().indexOf(userInput) >= 0;\n\n    let quickSearchResult = this.state.data.filter(filterFn);\n\n    this.props.onQuickSearch(quickSearchResult);\n    console.log(\"search done\");\n  };\n\n  render() {\n    return (\n      <div className=\"quick-search\">\n        <input type=\"text\" onChange={e => this.onQuickSearch(e)} />\n        <FontAwesomeIcon icon={faSearch} className=\"search-icon\" />\n      </div>\n    );\n  }\n}\n\nexport default QuickSearch;\n","import React from \"react\";\n//import \"../Sass/components/_delete-records.scss\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numSelectedRecords: 0\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return { numSelectedRecords: props.numSelectedRecords };\n  }\n\n  render() {\n    return (\n      <div className=\"delete-records\">\n        <input\n          type=\"button\"\n          onClick={this.props.onDelete}\n          // ES6 string\n          value={`Delete ${this.state.numSelectedRecords} Records`}\n          // disabled={this.state.numSelectedRecords === 0}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport ExpenseList from \"./ExpenseList\";\nimport Filter from \"./Filter\";\nimport ExpenseForm from \"./ExpenseForm\";\nimport QuickSearch from \"./QuickSearch\";\nimport DeleteRecords from \"./DeleteRecords\";\nimport expenseService from \"../Services/expenseService\";\nimport \"../Sass/main.scss\";\n\nclass MainPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expenseList: [],\n      quickSearchResult: [],\n      numSelectedRecords: 0\n    };\n  }\n\n  // delete all records that marked as \"selected\"\n  handleDelete = () => {\n    // Find element ids\n    const idList = this.state.expenseList\n      .filter(item => item.isSelected)\n      .map(item => item.id);\n\n    // Post the new array which includs all selected elements' ids to sever\n    // Then reload data from sever\n    // fetch(\"http://localhost:50204/api/Expense/delete\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(idList)\n    // })\n    expenseService\n      .deleteExpense(idList)\n      .then(resp => resp.json())\n      .then(data => {\n        // fetch(\"http://localhost:50204/api/Expense\")\n        expenseService\n          .getAllExpense()\n          .then(resp => resp.json())\n          .then(data => {\n            const modifiedData = this.addFlagToList(data);\n            this.setState({\n              expenseList: modifiedData,\n              quickSearchResult: modifiedData\n            });\n          });\n      });\n  };\n\n  handleQuickSearch = quickSearchResult => {\n    this.setState({ quickSearchResult: quickSearchResult });\n  };\n\n  // add isSelected flag to each element of data list\n  addFlagToList = dataList => {\n    return dataList.map(item => {\n      item.isSelected = false;\n      return item;\n    });\n  };\n\n  handleFilterResult = filterResult => {\n    // add flags to filter result\n    const modifiedData = this.addFlagToList(filterResult);\n\n    // using filterd result to update expense list\n    this.setState({\n      expenseList: modifiedData,\n      quickSearchResult: modifiedData\n    });\n  };\n\n  handleAddNewRecord = newRecord => {\n    // debugger;\n    // Call API to post new record to server and update to table\n    // fetch(\"http://localhost:50204/api/Expense\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(newRecord)\n    // })\n    expenseService\n      .addNew(newRecord)\n      .then(resp => resp.json())\n      .then(addedRecord => {\n        // add flag to this new record obj\n        addedRecord.isSelected = false;\n        const list = this.state.expenseList;\n        list.push(addedRecord);\n\n        this.setState({ expenseList: list, quickSearchResult: list });\n      });\n  };\n\n  handleToggleSelect = numSelectedRecords => {\n    this.setState({ numSelectedRecords: numSelectedRecords });\n  };\n\n  // load data from sever after render\n  componentDidMount() {\n    //fetch(\"http://localhost:50204/api/Expense\")\n    expenseService\n      .getAllExpense()\n      .then(resp => resp.json())\n      .then(data => {\n        const modifiedData = this.addFlagToList(data);\n\n        this.setState({\n          expenseList: modifiedData,\n          quickSearchResult: modifiedData\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"main-page\">\n        <div>\n          <QuickSearch\n            data={this.state.expenseList}\n            onQuickSearch={this.handleQuickSearch}\n          />\n          <Filter onApplyFilter={this.handleFilterResult} />\n        </div>\n\n        <div>\n          <ExpenseForm onAddNewRecord={this.handleAddNewRecord} />\n          <DeleteRecords\n            onDelete={this.handleDelete}\n            numSelectedRecords={this.state.numSelectedRecords}\n          />\n          <ExpenseList\n            data={this.state.quickSearchResult}\n            onToggleSelect={this.handleToggleSelect}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from \"react\";\nimport \"./App.scss\";\nimport \"./Sass/main.scss\";\nimport Login from \"./Components/Login\";\nimport Header from \"./Components/Header\";\nimport Footer from \"./Components/Footer\";\nimport MainPage from \"./Components/MainPage\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/expense\" component={MainPage} />\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}